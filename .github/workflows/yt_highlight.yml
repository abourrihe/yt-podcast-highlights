name: YouTube Highlights (Windows + Firefox, Arabic E2E)

on:
  workflow_dispatch:
    inputs:
      videoId:
        description: "YouTube Video ID (e.g., S9a1nLw70p0)"
        required: true
        type: string
      profile:
        description: 'Firefox profile folder from about:profiles (e.g., "yov4tydr.default-release-3")'
        required: true
        default: "yov4tydr.default-release-3"
        type: string
      whisper_model:
        description: "Whisper model (bigger = better but slower)"
        required: true
        default: "medium"
        type: choice
        options: [tiny, base, small, medium]
      topN:
        description: "How many highlight segments to export"
        required: true
        default: "8"
        type: choice
        options: ["5","8","10","12"]
      padPre:
        description: "Seconds padding before each clip"
        required: true
        default: "0.6"
        type: string
      padPost:
        description: "Seconds padding after each clip"
        required: true
        default: "0.6"
        type: string

jobs:
  highlight:
    runs-on: self-hosted

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Allow PowerShell scripts (CurrentUser)
        shell: powershell
        run: Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -Force

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (yt-dlp nightly)
        shell: powershell
        run: |
          python -m pip install --upgrade pip
          pip install --pre --upgrade yt-dlp
          pip install faster-whisper==1.0.3 pandas==2.2.2

      - name: Ensure ffmpeg available (prefer existing install)
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          function Add-ToCurrentAndNextSteps([string]$dir) {
            if (-not (Test-Path $dir)) { return $false }
            $env:Path = "$dir;$env:Path"   # current step
            $dir | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            Write-Host "Using ffmpeg at: $dir"
            return $true
          }

          $cmd = Get-Command ffmpeg -ErrorAction SilentlyContinue
          if (-not $cmd) {
            Write-Host "ffmpeg not on PATH. Searching common locations..."
            $candidates = @(
              "C:\ffmpeg\bin",
              "C:\Program Files\ffmpeg\bin",
              "C:\Program Files (x86)\ffmpeg\bin",
              "$env:ProgramData\chocolatey\bin",
              "$env:USERPROFILE\scoop\apps\ffmpeg\current\bin"
            )
            $found = $false
            foreach ($d in $candidates) {
              if (Test-Path (Join-Path $d "ffmpeg.exe")) { $found = Add-ToCurrentAndNextSteps $d; break }
            }
            if (-not $found) {
              Write-Host "No local ffmpeg found; downloading portable build..."
              $temp = Join-Path $env:RUNNER_TEMP "ffmpeg"
              New-Item -ItemType Directory -Force -Path $temp | Out-Null
              $zip = Join-Path $temp "ffmpeg.zip"
              try { Invoke-WebRequest -Uri "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip" -OutFile $zip }
              catch { & curl.exe -L "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip" -o $zip }
              Expand-Archive -Path $zip -DestinationPath $temp -Force
              $bin = Get-ChildItem -Path $temp -Recurse -Directory |
                Where-Object { Test-Path (Join-Path $_.FullName "bin\ffmpeg.exe") } |
                Select-Object -First 1
              if (-not $bin) { throw "ffmpeg bin folder not found after extract." }
              $binPath = Join-Path $bin.FullName "bin"
              Add-ToCurrentAndNextSteps $binPath | Out-Null
            }
          } else {
            Write-Host "ffmpeg already on PATH at: $($cmd.Source)"
          }

          ffmpeg -version | Select-Object -First 1

      - name: Ensure Firefox is closed & profile exists
        shell: powershell
        run: |
          if (Get-Process firefox -ErrorAction SilentlyContinue) {
            Write-Error "Firefox is running. Close all Firefox windows, then rerun." ; exit 1
          }
          $base = Join-Path $env:APPDATA 'Mozilla\Firefox\Profiles'
          $prof = '${{ inputs.profile }}'
          $path = Join-Path $base $prof
          Write-Host "Checking profile at: $path"
          if (-not (Test-Path $path)) {
            Write-Error "Firefox profile '$prof' not found under $base. Open about:profiles and copy the folder name." ; exit 1
          }

      - name: List formats (WEB client) and save output
        shell: powershell
        run: |
          $CFB = "firefox:${{ inputs.profile }}"
          $URL = "https://www.youtube.com/watch?v=${{ inputs.videoId }}"
          Write-Host "Using cookies-from-browser = $CFB (WEB client)"
          yt-dlp --verbose --cookies-from-browser $CFB `
                 --extractor-args "youtube:player_client=web" `
                 -F $URL | Tee-Object -FilePath list-formats.txt

      - name: Download video (WEB client → fallback → best)
        shell: powershell
        run: |
          $CFB = "firefox:${{ inputs.profile }}"
          $URL = "https://www.youtube.com/watch?v=${{ inputs.videoId }}"
          $FMT = 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'

          # Try 1: web client
          yt-dlp --verbose --cookies-from-browser $CFB `
                 --extractor-args "youtube:player_client=web" `
                 --retries 5 --extractor-retries 5 `
                 -o "input.%(ext)s" -f $FMT `
                 $URL
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Retrying with web_safari client…"
            yt-dlp --verbose --cookies-from-browser $CFB `
                   --extractor-args "youtube:player_client=web_safari" `
                   --retries 5 --extractor-retries 5 `
                   -o "input.%(ext)s" -f $FMT `
                   $URL
            if ($LASTEXITCODE -ne 0) {
              Write-Host "Final retry with safest selector (best)…"
              yt-dlp --verbose --cookies-from-browser $CFB `
                     --extractor-args "youtube:player_client=web_safari" `
                     --retries 5 --extractor-retries 5 `
                     -o "input.%(ext)s" -f best `
                     $URL
              if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
            }
          }

          Write-Host "Files after download:"
          Get-ChildItem -Force | Format-Table -AutoSize

      - name: Normalize to MP4 (transcode if needed)
        shell: powershell
        run: |
          $file = Get-ChildItem -File input.* | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $file) { Write-Error "No input.* found after download." ; exit 1 }

          if ($file.Extension -ieq ".mp4") {
            if ($file.Name -ieq "input.mp4") {
              Write-Host "Already MP4 and correctly named input.mp4."
            } else {
              Write-Host "MP4 already; renaming $($file.Name) -> input.mp4"
              Copy-Item -Force -LiteralPath $file.FullName -Destination "input.mp4"
            }
          } else {
            Write-Host "Converting $($file.Name) -> input.mp4 (libx264/aac)"
            ffmpeg -y -i "$($file.FullName)" -c:v libx264 -preset veryfast -crf 21 -c:a aac -b:a 160k input.mp4
          }

      - name: Extract audio to WAV (16k mono)
        shell: powershell
        run: ffmpeg -y -i "input.mp4" -vn -ac 1 -ar 16000 -c:a pcm_s16le "audio.wav"

      - name: Write transcribe.py
        shell: powershell
        run: |
          $lines = @(
            'import json',
            'from datetime import timedelta',
            'from faster_whisper import WhisperModel',
            '',
            "model_size = `"$('${{ inputs.whisper_model }}')`"",
            'model = WhisperModel(model_size, device="cpu", compute_type="int8")',
            '',
            'segments, info = model.transcribe(',
            '    "audio.wav",',
            '    language="ar",',
            '    vad_filter=True,',
            '    beam_size=5,',
            '    no_speech_threshold=0.45,',
            '    compression_ratio_threshold=2.4',
            ')',
            '',
            'out = []',
            'for seg in segments:',
            '    out.append({',
            '        "start": round(seg.start, 2),',
            '        "end": round(seg.end, 2),',
            '        "text": seg.text.strip()',
            '    })',
            '',
            'with open("transcript.json", "w", encoding="utf-8") as f:',
            '    json.dump({"language": "ar", "segments": out}, f, ensure_ascii=False, indent=2)',
            '',
            'def fmt_time(t):',
            '    ms = int((t - int(t))*1000)',
            '    td = timedelta(seconds=int(t))',
            '    hh = int(td.total_seconds()//3600)',
            '    mm = int((td.total_seconds()%3600)//60)',
            '    ss = int(td.total_seconds()%60)',
            '    return f"{hh:02d}:{mm:02d}:{ss:02d},{ms:03d}"',
            '',
            'with open("transcript.srt", "w", encoding="utf-8") as f:',
            '    for i, s in enumerate(out, 1):',
            '        f.write(f"{i}\n{fmt_time(s[''start''])} --> {fmt_time(s[''end''])}\n{s[''text'']}\n\n")'
          )
          [IO.File]::WriteAllText("transcribe.py", ($lines -join "`r`n"), [Text.Encoding]::UTF8)

      - name: Transcribe (run)
        shell: powershell
        run: python transcribe.py

      - name: Write score_ar.py
        shell: powershell
        run: |
          $lines = @(
            'import json, re',
            'import pandas as pd',
            '',
            'with open("transcript.json","r",encoding="utf-8") as f:',
            '    data = json.load(f)',
            'segs = data["segments"]',
            '',
            '# Arabic cues',
            'arabic_keywords = [',
            '  r"لماذا|ليش|ليه|كيف|ماذا|شنو|ايش|شو|متى|أين|وين|من|كم|هل",',
            '  r"أفضل|أحسن|أكبر|أصغر|أهم|أقوى|أسرع|أغلى|أرخص|الأفضل|الأهم",',
            '  r"مشكلة|حل|سر|نصيحة|خدعة|طريقة|استراتيجية|إستراتيجية|حقيقة|تحذير|خطأ|أرباح|خسارة|نمو|صفقة|استثمار|نتيجة",',
            '  r"[0-9٠-٩]+|٪|%",',
            '  r"؟|!"',
            ']',
            'pat = re.compile("|".join(f"(?:{p})" for p in arabic_keywords))',
            '',
            'rows=[]',
            'for s in segs:',
            '    txt = s["text"]',
            '    score = 0.0',
            '    score += len(pat.findall(txt))',
            '    dur = s["end"] - s["start"]',
            '    if 4.0 <= dur <= 25.0: score += 1.0',
            '    if txt.endswith(("؟","!",".")): score += 0.5',
            '    rows.append({**s, "score": float(score), "dur": dur})',
            '',
            'df = pd.DataFrame(rows).sort_values(["score","dur"], ascending=[False,True])',
            'TOPN = int("' + '${{ inputs.topN }}' + '")',
            'top = df.head(TOPN)',
            '',
            'top.to_json("highlights.json", orient="records", force_ascii=False, indent=2)',
            'with open("highlights.txt","w",encoding="utf-8") as f:',
            '    for i, r in enumerate(top.itertuples(), 1):',
            '        f.write(f"[{r.start:07.2f}-{r.end:07.2f}] (score={r.score:.1f}) {r.text}\n")'
          )
          [IO.File]::WriteAllText("score_ar.py", ($lines -join "`r`n"), [Text.Encoding]::UTF8)

      - name: Score highlights (run)
        shell: powershell
        run: python score_ar.py

      - name: Write export_clips.py
        shell: powershell
        run: |
          $lines = @(
            'import json, os, subprocess',
            'PAD_PRE = float("' + '${{ inputs.padPre }}' + '")',
            'PAD_POST= float("' + '${{ inputs.padPost }}' + '")',
            '',
            'with open("highlights.json","r",encoding="utf-8") as f:',
            '    segs = json.load(f)',
            '',
            'os.makedirs("clips", exist_ok=True)',
            'for i, s in enumerate(segs, 1):',
            '    ss = max(0.0, s["start"] - PAD_PRE)',
            '    to = max(0.1, (s["end"] + PAD_POST) - ss)',
            '    out = f"clips/clip_{i:02d}.mp4"',
            '    cmd = [',
            '        "ffmpeg","-y",',
            '        "-ss", f"{ss:.3f}", "-i", "input.mp4",',
            '        "-t", f"{to:.3f}",',
            '        "-c:v","libx264","-preset","veryfast","-crf","22",',
            '        "-c:a","aac","-b:a","128k",',
            '        out',
            '    ]',
            '    subprocess.run(cmd, check=True)'
          )
          [IO.File]::WriteAllText("export_clips.py", ($lines -join "`r`n"), [Text.Encoding]::UTF8)

      - name: Export highlight clips (run)
        shell: powershell
        run: python export_clips.py

      - name: Upload artifacts (formats, transcript, highlights, clips)
        uses: actions/upload-artifact@v4
        with:
          name: highlights-output
          path: |
            list-formats.txt
            input.mp4
            audio.wav
            transcript.json
            transcript.srt
            highlights.json
            highlights.txt
            clips/*.mp4
          if-no-files-found: warn
