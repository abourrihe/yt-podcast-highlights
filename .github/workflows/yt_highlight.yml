name: YouTube Highlights (Windows + Firefox, Arabic E2E)

on:
  workflow_dispatch:
    inputs:
      videoId:
        description: "YouTube Video ID (e.g., S9a1nLw70p0)"
        required: true
        type: string
      profile:
        description: 'Firefox profile folder from about:profiles (e.g., "yov4tydr.default-release-3")'
        required: true
        default: "yov4tydr.default-release-3"
        type: string
      whisper_model:
        description: "Whisper model (bigger = better but slower)"
        required: true
        default: "medium"
        type: choice
        options: [tiny, base, small, medium]
      topN:
        description: "How many highlight segments to export"
        required: true
        default: "8"
        type: choice
        options: ["5","8","10","12"]
      padPre:
        description: "Seconds padding before each clip"
        required: true
        default: "0.6"
        type: string
      padPost:
        description: "Seconds padding after each clip"
        required: true
        default: "0.6"
        type: string

jobs:
  highlight:
    runs-on: self-hosted

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Allow PowerShell scripts (CurrentUser)
        shell: powershell
        run: Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -Force

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (yt-dlp nightly)
        shell: powershell
        run: |
          python -m pip install --upgrade pip
          pip install --pre --upgrade yt-dlp
          pip install faster-whisper==1.0.3 pandas==2.2.2

      - name: Ensure ffmpeg available (prefer existing install)
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          function Add-ToCurrentAndNextSteps([string]$dir) {
            if (-not (Test-Path $dir)) { return $false }
            $env:Path = "$dir;$env:Path"
            $dir | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            Write-Host "Using ffmpeg at: $dir"
            return $true
          }

          $cmd = Get-Command ffmpeg -ErrorAction SilentlyContinue
          if (-not $cmd) {
            Write-Host "ffmpeg not on PATH. Searching common locations..."
            $candidates = @(
              "C:\ffmpeg\bin",
              "C:\Program Files\ffmpeg\bin",
              "C:\Program Files (x86)\ffmpeg\bin",
              "$env:ProgramData\chocolatey\bin",
              "$env:USERPROFILE\scoop\apps\ffmpeg\current\bin"
            )
            $found = $false
            foreach ($d in $candidates) {
              if (Test-Path (Join-Path $d "ffmpeg.exe")) { $found = Add-ToCurrentAndNextSteps $d; break }
            }
            if (-not $found) {
              Write-Host "No local ffmpeg found; downloading portable build..."
              $temp = Join-Path $env:RUNNER_TEMP "ffmpeg"
              New-Item -ItemType Directory -Force -Path $temp | Out-Null
              $zip = Join-Path $temp "ffmpeg.zip"
              try { Invoke-WebRequest -Uri "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip" -OutFile $zip }
              catch { & curl.exe -L "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip" -o $zip }
              Expand-Archive -Path $zip -DestinationPath $temp -Force
              $bin = Get-ChildItem -Path $temp -Recurse -Directory |
                Where-Object { Test-Path (Join-Path $_.FullName "bin\ffmpeg.exe") } |
                Select-Object -First 1
              if (-not $bin) { throw "ffmpeg bin folder not found after extract." }
              Add-ToCurrentAndNextSteps (Join-Path $bin.FullName "bin") | Out-Null
            }
          } else {
            Write-Host "ffmpeg already on PATH at: $($cmd.Source)"
          }

          ffmpeg -version | Select-Object -First 1

      - name: Ensure Firefox is closed & profile exists
        shell: powershell
        run: |
          if (Get-Process firefox -ErrorAction SilentlyContinue) {
            Write-Error "Firefox is running. Close all Firefox windows, then rerun." ; exit 1
          }
          $base = Join-Path $env:APPDATA 'Mozilla\Firefox\Profiles'
          $prof = '${{ inputs.profile }}'
          $path = Join-Path $base $prof
          Write-Host "Checking profile at: $path"
          if (-not (Test-Path $path)) {
            Write-Error "Firefox profile '$prof' not found under $base. Open about:profiles and copy the folder name." ; exit 1
          }

      - name: List formats (WEB client) and save output
        shell: powershell
        run: |
          $CFB = "firefox:${{ inputs.profile }}"
          $URL = "https://www.youtube.com/watch?v=${{ inputs.videoId }}"
          yt-dlp --verbose --cookies-from-browser $CFB `
                 --extractor-args "youtube:player_client=web" `
                 -F $URL | Tee-Object -FilePath list-formats.txt

      - name: Download video (WEB client → fallback → best)
        shell: powershell
        run: |
          $CFB = "firefox:${{ inputs.profile }}"
          $URL = "https://www.youtube.com/watch?v=${{ inputs.videoId }}"
          $FMT = 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'

          yt-dlp --verbose --cookies-from-browser $CFB `
                 --extractor-args "youtube:player_client=web" `
                 --retries 5 --extractor-retries 5 `
                 -o "input.%(ext)s" -f $FMT `
                 $URL
          if ($LASTEXITCODE -ne 0) {
            yt-dlp --verbose --cookies-from-browser $CFB `
                   --extractor-args "youtube:player_client=web_safari" `
                   --retries 5 --extractor-retries 5 `
                   -o "input.%(ext)s" -f $FMT `
                   $URL
            if ($LASTEXITCODE -ne 0) {
              yt-dlp --verbose --cookies-from-browser $CFB `
                     --extractor-args "youtube:player_client=web_safari" `
                     --retries 5 --extractor-retries 5 `
                     -o "input.%(ext)s" -f best `
                     $URL
              if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
            }
          }

          Write-Host "Files after download:"
          Get-ChildItem -Force | Format-Table -AutoSize

      - name: Normalize to MP4 (transcode if needed)
        shell: powershell
        run: |
          $file = Get-ChildItem -File input.* | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $file) { Write-Error "No input.* found after download." ; exit 1 }

          if ($file.Extension -ieq ".mp4") {
            if ($file.Name -ieq "input.mp4") {
              Write-Host "Already MP4 and correctly named input.mp4."
            } else {
              Copy-Item -Force -LiteralPath $file.FullName -Destination "input.mp4"
            }
          } else {
            ffmpeg -y -i "$($file.FullName)" -c:v libx264 -preset veryfast -crf 21 -c:a aac -b:a 160k input.mp4
          }

      - name: Extract audio to WAV (16k mono)
        shell: powershell
        run: ffmpeg -y -i "input.mp4" -vn -ac 1 -ar 16000 -c:a pcm_s16le "audio.wav"

      # --------- Write transcribe.py (ASCII-only PowerShell) ---------
      - name: Write transcribe.py
        shell: powershell
        run: |
          $MODEL = '${{ inputs.whisper_model }}'
          $lines = @(
            'import json',
            'from datetime import timedelta',
            'from faster_whisper import WhisperModel',
            '',
            "model_size = `"$MODEL`"",
            'model = WhisperModel(model_size, device="cpu", compute_type="int8")',
            '',
            'segments, info = model.transcribe(',
            '    "audio.wav",',
            '    language="ar",',
            '    vad_filter=True,',
            '    beam_size=5,',
            '    no_speech_threshold=0.45,',
            '    compression_ratio_threshold=2.4',
            ')',
            '',
            'out = []',
            'for seg in segments:',
            '    out.append({',
            '        "start": round(seg.start, 2),',
            '        "end": round(seg.end, 2),',
            '        "text": seg.text.strip()',
            '    })',
            '',
            'with open("transcript.json", "w", encoding="utf-8") as f:',
            '    json.dump({"language": "ar", "segments": out}, f, ensure_ascii=False, indent=2)',
            '',
            'def fmt_time(t):',
            '    ms = int((t - int(t))*1000)',
            '    hh = int(t // 3600)',
            '    mm = int((t % 3600) // 60)',
            '    ss = int(t % 60)',
            '    return f"{hh:02d}:{mm:02d}:{ss:02d},{ms:03d}"',
            '',
            'with open("transcript.srt", "w", encoding="utf-8") as f:',
            '    for i, s in enumerate(out, 1):',
            '        f.write(f"{i}\n{fmt_time(s[''start''])} --> {fmt_time(s[''end''])}\n{s[''text'']}\n\n")'
          )
          [IO.File]::WriteAllText("transcribe.py", ($lines -join "`r`n"), [Text.Encoding]::UTF8)

      - name: Transcribe (run)
        shell: powershell
        run: python transcribe.py

      # --------- Write score_ar.py (Arabic via \uXXXX, ASCII-only PS) ---------
      - name: Write score_ar.py
        shell: powershell
        run: |
          $TOPN = '${{ inputs.topN }}'
          $topLine = 'TOPN = ' + ([int]$TOPN)
          $lines = @(
            'import json, re',
            'import pandas as pd',
            '',
            'with open("transcript.json","r",encoding="utf-8") as f:',
            '    data = json.load(f)',
            'segs = data.get("segments", [])',
            '',
            '# Arabic keyword lists encoded as \\uXXXX to avoid encoding issues',
            'question_words = [' +
              '"\\u0644\\u0645\\u0627\\u0630\\u0627",' +
              '"\\u0644\\u064a\\u0634",' +
              '"\\u0644\\u064a\\u0647",' +
              '"\\u0643\\u064a\\u0641",' +
              '"\\u0645\\u0627\\u0630\\u0627",' +
              '"\\u0634\\u0646\\u0648",' +
              '"\\u0627\\u064a\\u0634",' +
              '"\\u0634\\u0648",' +
              '"\\u0645\\u062a\\u0649",' +
              '"\\u0623\\u064a\\u0646",' +
              '"\\u0648\\u064a\\u0646",' +
              '"\\u0645\\u0646",' +
              '"\\u0643\\u0645",' +
              '"\\u0647\\u0644"' +
            ']',
            'superlatives = [' +
              '"\\u0623\\u0641\\u0636\\u0644",' +
              '"\\u0623\\u062d\\u0633\\u0646",' +
              '"\\u0623\\u0643\\u0628\\u0631",' +
              '"\\u0623\\u0635\\u063a\\u0631",' +
              '"\\u0623\\u0647\\u0645",' +
              '"\\u0623\\u0642\\u0648\\u0649",' +
              '"\\u0623\\u0633\\u0631\\u0639",' +
              '"\\u0623\\u063a\\u0644\\u0649",' +
              '"\\u0623\\u0631\\u062e\\u0635",' +
              '"\\u0627\\u0644\\u0623\\u0641\\u0636\\u0644",' +
              '"\\u0627\\u0644\\u0623\\u0647\\u0645"' +
            ']',
            'topic_words = [' +
              '"\\u0645\\u0634\\u0643\\u0644\\u0629",' +
              '"\\u062d\\u0644",' +
              '"\\u0633\\u0631",' +
              '"\\u0646\\u0635\\u064a\\u062d\\u0629",' +
              '"\\u062e\\u062f\\u0639\\u0629",' +
              '"\\u0637\\u0631\\u064a\\u0642\\u0629",' +
              '"\\u0627\\u0633\\u062a\\u0631\\u0627\\u062a\\u064a\\u062c\\u064a\\u0629",' +
              '"\\u0625\\u0633\\u062a\\u0631\\u0627\\u062a\\u064a\\u062c\\u064a\\u0629",' +
              '"\\u062d\\u0642\\u064a\\u0642\\u0629",' +
              '"\\u062a\\u062d\\u0630\\u064a\\u0631",' +
              '"\\u062e\\u0637\\u0623",' +
              '"\\u0623\\u0631\\u0628\\u0627\\u062d",' +
              '"\\u062e\\u0633\\u0627\\u0631\\u0629",' +
              '"\\u0646\\u0645\\u0648",' +
              '"\\u0635\\u0641\\u0642\\u0629",' +
              '"\\u0627\\u0633\\u062a\\u062b\\u0645\\u0627\\u0631",' +
              '"\\u0646\\u062a\\u064a\\u062c\\u0629"' +
            ']',
            '',
            'digits_pct_pat = r"[0-9\\u0660-\\u0669]+|%|\\u066a"',
            'qmark_pat = r"\\u061f|!"',
            '',
            'def build_pat(words):',
            '    import re',
            '    return "(?:" + "|".join(re.escape(w) for w in words) + ")"',
            '',
            'arabic_keywords = [',
            '    build_pat(question_words),',
            '    build_pat(superlatives),',
            '    build_pat(topic_words),',
            '    digits_pct_pat,',
            '    qmark_pat',
            ']',
            'pat = re.compile("|".join(f"(?:{p})" for p in arabic_keywords))',
            '',
            'rows = []',
            'for s in segs:',
            '    txt = s["text"]',
            '    score = 0.0',
            '    score += len(pat.findall(txt))',
            '    dur = s["end"] - s["start"]',
            '    if 4.0 <= dur <= 25.0:',
            '        score += 1.0',
            '    if txt.endswith(("\\u061f","!",".")):',
            '        score += 0.5',
            '    rows.append({**s, "score": float(score), "dur": dur})',
            '',
            'import pandas as pd',
            'df = pd.DataFrame(rows).sort_values(["score","dur"], ascending=[False, True])'
          )
          $lines += $topLine
          $lines += @(
            'top = df.head(TOPN)',
            '',
            'top.to_json("highlights.json", orient="records", force_ascii=False, indent=2)',
            'with open("highlights.txt","w",encoding="utf-8") as f:',
            '    for i, r in enumerate(top.itertuples(), 1):',
            '        f.write(f"[{r.start:07.2f}-{r.end:07.2f}] (score={r.score:.1f}) {r.text}\n")'
          )
          [IO.File]::WriteAllText("score_ar.py", ($lines -join "`r`n"), [Text.Encoding]::UTF8)

      - name: Score highlights (run)
        shell: powershell
        run: python score_ar.py

      # --------- NEW: write propose_clips_v2.py (sliding 30–60s windows) ---------
      - name: Write propose_clips_v2.py
        shell: powershell
        run: |
          $lines = @(
            'import json, argparse',
            '',
            'def hhmmss(t):',
            '    h=int(t//3600); m=int((t%3600)//60); s=t-60*m-3600*h',
            '    return f"{h:02d}:{m:02d}:{s:06.3f}"',
            '',
            'ap = argparse.ArgumentParser()',
            'ap.add_argument("--transcript", default="transcript.json")',
            'ap.add_argument("--min-seconds", type=float, default=30.0)',
            'ap.add_argument("--max-seconds", type=float, default=60.0)',
            'ap.add_argument("--step", type=float, default=2.0)',
            'ap.add_argument("--top-n", type=int, default=20)',
            'ap.add_argument("--out", default="out/candidates.json")',
            'args = ap.parse_args()',
            '',
            'data = json.load(open(args.transcript,"r",encoding="utf-8"))',
            'segs = data.get("segments", [])',
            'T = segs[-1]["end"] if segs else 0.0',
            '',
            'import os; os.makedirs("out", exist_ok=True)',
            'cands = []',
            't = 0.0',
            'while t + args.min_seconds <= T:',
            '    w_start, w_end = t, min(t + args.max_seconds, T)',
            '    inside = [s for s in segs if s["start"] < w_end and s["end"] > w_start]',
            '    if not inside: t += args.step; continue',
            '    text = " ".join(s["text"] for s in inside)',
            '    dur = w_end - w_start',
            '    if dur < args.min_seconds: t += args.step; continue',
            '    # simple features: length fit + punctuation end + density',
            '    mid = 0.5*(args.min_seconds + args.max_seconds)',
            '    len_fit = max(0.0, 1.0 - abs(dur-mid)/mid)',
            '    punct_end = 1.0 if (text.strip().endswith(("؟","?","!","."))) else 0.0',
            '    words = len(text.split())',
            '    density = min(1.0, words/max(1.0,dur)/3.0)  # ~3 w/s target',
            '    score = 1.2*len_fit + 0.6*punct_end + 0.6*density',
            '    cands.append({',
            '        "id": f"cand_{len(cands)+1:04d}",',
            '        "start": hhmmss(w_start), "end": hhmmss(w_end),',
            '        "text": text[:900], "score": round(score,3),',
            '        "features": {',
            '            "length_fit": round(len_fit,3), "punct_end": punct_end, "density": round(density,3)',
            '        },',
            '        "reason": f"len_fit={len_fit:.2f}, punct_end={punct_end:.0f}, density={density:.2f}"',
            '    })',
            '    t += args.step',
            '',
            'cands.sort(key=lambda x: x["score"], reverse=True)',
            '# keep top-N with spacing (>=20s apart by start time)',
            'def tosec(hms):',
            '    h,m,s = hms.split(":"); return int(h)*3600 + int(m)*60 + float(s)',
            'chosen, used = [], []',
            'for c in cands:',
            '    cs = tosec(c["start"])',
            '    if any(abs(cs-u)<20 for u in used):',
            '        continue',
            '    chosen.append(c); used.append(cs)',
            '    if len(chosen)>=args.top_n: break',
            '',
            'json.dump(chosen, open(args.out,"w",encoding="utf-8"), ensure_ascii=False, indent=2)',
            'print(f"Wrote {args.out} ({len(chosen)} candidates)")'
          )
          [IO.File]::WriteAllText("propose_clips_v2.py", ($lines -join "`r`n"), [Text.Encoding]::UTF8)

      - name: Propose top candidates (heuristics v2)
        shell: powershell
        run: |
          mkdir out -Force | Out-Null
          python propose_clips_v2.py --transcript transcript.json --min-seconds 30 --max-seconds 60 --top-n 20 --out out/candidates.json

      # --------- NEW: write rerank_with_llm.py (Ollama optional; safe fallback) ---------
      - name: Write rerank_with_llm.py
        shell: powershell
        run: |
          $lines = @(
            'import json, argparse, subprocess, textwrap, sys, os',
            'MODEL = os.environ.get("OLLAMA_MODEL","qwen2:1.5b-instruct")',
            'def ollama_run(prompt: str) -> str:',
            '    try:',
            '        p = subprocess.run(["ollama","run",MODEL], input=prompt.encode("utf-8"), stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)',
            '        return p.stdout.decode("utf-8","ignore")',
            '    except Exception as e:',
            '        print(f"[LLM fallback] {e}", file=sys.stderr); return ""',
            'ap = argparse.ArgumentParser()',
            'ap.add_argument("--candidates", required=True)',
            'ap.add_argument("--out", default="out/approved_clips.json")',
            'ap.add_argument("--take-top", type=int, default=3)',
            'args = ap.parse_args()',
            'cands = json.load(open(args.candidates,"r",encoding="utf-8"))',
            'items = [{"id":c["id"],"start":c["start"],"end":c["end"],"text":c.get("text",""),"score":c.get("score",0.0)} for c in cands[:20]]',
            'prompt = textwrap.dedent(f"""',
            'أنت محرّر لمقاطع بودكاست عربي قصيرة (Shorts/Reels).',
            'اختر الأفضل (٣–٥) بناءً على: خطّاف في أول ٣ ثوانٍ، قيمة/إجابة واضحة، نهاية مريحة، تنوّع بالمواضيع.',
            'أعد JSON فقط:',
            '[',
            '  {{"id":"...","start":"HH:MM:SS.mmm","end":"HH:MM:SS.mmm","title":"عنوان قصير","reason":"سبب الاختيار"}}',
            ']',
            'المرشحون:',
            '{json.dumps(items, ensure_ascii=False, indent=2)}',
            '""").strip()',
            'raw = ollama_run(prompt)',
            'start = raw.find("["); end = raw.rfind("]")',
            'approved = []',
            'if start!=-1 and end!=-1:',
            '    try: approved = json.loads(raw[start:end+1])',
            '    except Exception: approved = []',
            'if not approved:',
            '    # fallback: top by score',
            '    approved = [{"id":it["id"],"start":it["start"],"end":it["end"],"title":f"مقطع #{i+1}","reason":"Fallback: أعلى نتيجة"} for i,it in enumerate(items[:args.take_top])]',
            'os.makedirs("out", exist_ok=True)',
            'with open(args.out,"w",encoding="utf-8") as f: json.dump(approved,f,ensure_ascii=False,indent=2)',
            'print(f"Wrote {args.out} with {len(approved)} clips.")'
          )
          [IO.File]::WriteAllText("rerank_with_llm.py", ($lines -join "`r`n"), [Text.Encoding]::UTF8)

      - name: (Optional) Pull local LLM (Ollama) for re-rank
        shell: powershell
        continue-on-error: true
        run: |
          if (Get-Command ollama -ErrorAction SilentlyContinue) {
            ollama pull qwen2:1.5b-instruct
          } else {
            Write-Host "Ollama not found; rerank will use fallback (top by score)."
          }

      - name: Re-rank candidates with local LLM (or fallback)
        shell: powershell
        run: python rerank_with_llm.py --candidates out/candidates.json --out out/approved_clips.json

      # --------- Write export_clips.py (now prefers approved_clips.json) ---------
      - name: Write export_clips.py
        shell: powershell
        run: |
          $PAD_PRE  = '${{ inputs.padPre }}'
          $PAD_POST = '${{ inputs.padPost }}'
          $linePre  = 'PAD_PRE = float("' + $PAD_PRE  + '")'
          $linePost = 'PAD_POST = float("' + $PAD_POST + '")'
          $lines = @(
            'import json, os, subprocess, sys',
            $linePre,
            $linePost,
            '',
            'def read_candidates():',
            '    if os.path.exists("out/approved_clips.json"):',
            '        return json.load(open("out/approved_clips.json","r",encoding="utf-8"))',
            '    elif os.path.exists("highlights.json"):',
            '        # fallback: use segment-level highlights from score_ar.py',
            '        hs = json.load(open("highlights.json","r",encoding="utf-8"))',
            '        # convert to same shape (use exact start/end)',
            '        res = []',
            '        for i,h in enumerate(hs,1):',
            '            res.append({"id": f"seg_{i:02d}", "start": h["start"], "end": h["end"], "title": f"Highlight {i}"})',
            '        return res',
            '    else:',
            '        print("No approved_clips.json or highlights.json found.", file=sys.stderr); sys.exit(1)',
            '',
            'def tosec(hms):',
            '    h,m,s = hms.split(":"); return int(h)*3600 + int(m)*60 + float(s)',
            '',
            'clips = read_candidates()',
            'os.makedirs("clips", exist_ok=True)',
            'for i, c in enumerate(clips, 1):',
            '    ss = max(0.0, tosec(c["start"]) - PAD_PRE)',
            '    to = max(0.1, (tosec(c["end"]) + PAD_POST) - ss)',
            '    out = f"clips/clip_{i:02d}.mp4"',
            '    cmd = [',
            '        "ffmpeg","-y",',
            '        "-ss", f"{ss:.3f}", "-i", "input.mp4",',
            '        "-t", f"{to:.3f}",',
            '        "-c:v","libx264","-preset","veryfast","-crf","22",',
            '        "-c:a","aac","-b:a","128k",',
            '        out',
            '    ]',
            '    print("+"," ".join(cmd))',
            '    subprocess.run(cmd, check=True)'
          )
          [IO.File]::WriteAllText("export_clips.py", ($lines -join "`r`n"), [Text.Encoding]::UTF8)

      - name: Export highlight clips (run)
        shell: powershell
        run: python export_clips.py

      - name: Upload artifacts (formats, transcript, highlights, clips)
        uses: actions/upload-artifact@v4
        with:
          name: highlights-output
          path: |
            list-formats.txt
            input.mp4
            audio.wav
            transcript.json
            transcript.srt
            highlights.json
            highlights.txt
            out/candidates.json
            out/approved_clips.json
            clips/*.mp4
          if-no-files-found: warn
