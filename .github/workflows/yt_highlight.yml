name: YouTube → Highlight → Drive

on:
  workflow_dispatch:
    inputs:
      videoId:
        description: "YouTube video ID"
        required: true

jobs:
  highlight:
    runs-on: ubuntu-latest

    env:
      GDRIVE_REMOTE: ${{ secrets.GDRIVE_REMOTE }}
      GDRIVE_PATH: ${{ secrets.GDRIVE_PATH }}
      RCLONE_CONFIG_B64: ${{ secrets.RCLONE_CONFIG_B64 }}
      MAKE_WEBHOOK: ${{ secrets.MAKE_WEBHOOK }}
      YT_COOKIES: ${{ secrets.YT_COOKIES }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          pip install --upgrade pip
          pip install yt-dlp==2024.12.13 faster-whisper==1.0.3 rclone requests

      - name: Restore rclone.conf
        run: |
          echo "${RCLONE_CONFIG_B64}" | base64 --decode > ~/.config/rclone/rclone.conf

      - name: Download YouTube video
        run: |
          if [ -n "${YT_COOKIES}" ]; then
            echo "${YT_COOKIES}" > cookies.txt
            yt-dlp "https://www.youtube.com/watch?v=${{ inputs.videoId }}" \
              --cookies cookies.txt -o "video.%(ext)s"
          else
            yt-dlp "https://www.youtube.com/watch?v=${{ inputs.videoId }}" -o "video.%(ext)s"
          fi

      - name: Transcribe with Whisper
        run: |
          python - <<'PY'
from faster_whisper import WhisperModel
import sys
model = WhisperModel("large-v3", device="cpu", compute_type="int8")
segments, _ = model.transcribe("video.mp4", language="ar")
with open("subtitles.srt", "w", encoding="utf-8") as f:
    for seg in segments:
        f.write(f"{int(seg.start)} --> {int(seg.end)}\n{seg.text}\n\n")
PY

      - name: Upload to Google Drive
        run: |
          rclone copy video.mp4 "${GDRIVE_REMOTE}:${GDRIVE_PATH}"

      - name: Callback to Make.com
        if: always()
        run: |
          python - <<'PY'
import json, requests, os
payload = {
  "videoId": "${{ inputs.videoId }}",
  "status": "success" if os.path.exists("video.mp4") else "failed"
}
if os.path.exists("artifact.json"):
  payload.update(json.load(open('artifact.json')))
url = os.getenv('MAKE_WEBHOOK')
if url:
  try:
    r = requests.post(url, json=payload, timeout=20)
    print("Callback status:", r.status_code)
  except Exception as e:
    print("Callback error:", e)
else:
  print("MAKE_WEBHOOK not set; skipping callback.")
PY
