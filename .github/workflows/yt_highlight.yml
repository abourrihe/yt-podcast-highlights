name: YouTube Highlight (self-hosted, Windows)

on:
  workflow_dispatch:
    inputs:
      videoId:
        description: "YouTube Video ID (e.g., dQw4w9WgXcQ)"
        required: true
        type: string
      browser:
        description: "Browser to read cookies from (chrome or edge)"
        required: true
        default: "chrome"
        type: choice
        options: [chrome, edge]
      profile:
        description: 'Browser profile folder (e.g., "Default" or "Profile 1"). Leave as Default if unsure.'
        required: false
        default: "Default"
        type: string
      format:
        description: "yt-dlp format (leave default unless needed)"
        required: false
        default: 'bv*[ext=mp4]+ba[ext=m4a]/b[ext=mp4]/bv*+ba/b'
        type: string

jobs:
  highlight:
    runs-on: self-hosted

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Allow PowerShell scripts (CurrentUser)
        shell: powershell
        run: |
          Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -Force

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install yt-dlp
        shell: powershell
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade yt-dlp

      - name: Check ffmpeg availability
        shell: powershell
        run: |
          if (Get-Command ffmpeg -ErrorAction SilentlyContinue) {
            ffmpeg -version | Select-Object -First 1
          } else {
            Write-Host "WARNING: ffmpeg not found on PATH. If a merge is required, install ffmpeg or add it to PATH."
          }

      - name: Download source video (live cookies from local browser)
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          $VIDEO_ID = '${{ inputs.videoId }}'
          $BROWSER  = '${{ inputs.browser }}'.ToLower()
          $PROFILE  = '${{ inputs.profile }}'
          $FMT      = '${{ inputs.format }}'

          Write-Host "Requested browser=$BROWSER, profile=$PROFILE"

          function Resolve-Profile {
            param(
              [Parameter(Mandatory=$true)][string]$Browser,
              [Parameter(Mandatory=$true)][string]$Profile
            )

            $bases = @()
            if ($Browser -eq 'chrome') {
              $bases += (Join-Path $env:LOCALAPPDATA  'Google\Chrome\User Data')
              $bases += (Join-Path $env:APPDATA       'Google\Chrome\User Data')   # fallback (rare)
            } elseif ($Browser -eq 'edge') {
              $bases += (Join-Path $env:LOCALAPPDATA  'Microsoft\Edge\User Data')
              $bases += (Join-Path $env:APPDATA       'Microsoft\Edge\User Data')  # fallback (rare)
            } else {
              throw "Unsupported browser: $Browser"
            }

            foreach ($base in $bases) {
              if (-not (Test-Path $base)) { continue }

              $profPath = Join-Path $base $Profile
              if (Test-Path $profPath) {
                return @{ Path = $profPath; Name = $Profile; Base = $base }
              }

              # Auto-detect a usable profile if requested one isn't there
              $candidates = Get-ChildItem -Path $base -Directory -ErrorAction SilentlyContinue |
                Where-Object { $_.Name -match '^(Default|Profile \d+)$' }

              # Prefer ones that actually have a Cookies DB (Chrome: Network\Cookies; Edge similar)
              $scored = foreach ($d in $candidates) {
                $cookie1 = Join-Path $d.FullName 'Network\Cookies'
                $cookie2 = Join-Path $d.FullName 'Cookies'
                [pscustomobject]@{
                  Name = $d.Name
                  Full = $d.FullName
                  HasCookies = (Test-Path $cookie1) -or (Test-Path $cookie2)
                }
              }

              $pick = $scored | Sort-Object -Property @{Expression='HasCookies';Descending=$true}, Name | Select-Object -First 1
              if ($pick) {
                return @{ Path = $pick.Full; Name = $pick.Name; Base = $base }
              }
            }

            return $null
          }

          $resolved = Resolve-Profile -Browser $BROWSER -Profile $PROFILE
          if ($null -eq $resolved) {
            Write-Host "Could not locate a profile under expected bases."
            Write-Host "Checked:"
            if ($BROWSER -eq 'chrome') {
              Write-Host (" - " + (Join-Path $env:LOCALAPPDATA 'Google\Chrome\User Data'))
              Write-Host (" - " + (Join-Path $env:APPDATA      'Google\Chrome\User Data'))
            } else {
              Write-Host (" - " + (Join-Path $env:LOCALAPPDATA 'Microsoft\Edge\User Data'))
              Write-Host (" - " + (Join-Path $env:APPDATA      'Microsoft\Edge\User Data'))
            }
            Write-Host "Open chrome://version or edge://version and copy the tail of 'Profile Path' (e.g. 'Default' or 'Profile 1')."
            throw "Browser profile '$PROFILE' not found for $BROWSER"
          }

          Write-Host ("Resolved profile: " + $resolved.Name + " at " + $resolved.Path)

          # Build cookies-from-browser argument safely
          $CFB = $BROWSER + ':' + $resolved.Name
          Write-Host "cookies-from-browser = $CFB"

          yt-dlp --cookies-from-browser "$CFB" `
                 --extractor-args "youtube:player_client=android" `
                 -o "input.%(ext)s" -f "$FMT" `
                 "https://www.youtube.com/watch?v=$VIDEO_ID"

          Write-Host "Downloaded files:"
          Get-ChildItem -Force | Format-Table -AutoSize

      - name: Upload source artifact
        uses: actions/upload-artifact@v4
        with:
          name: source-video
          path: |
            input*.mp4
            input*.mkv
            input*.webm
          if-no-files-found: warn
