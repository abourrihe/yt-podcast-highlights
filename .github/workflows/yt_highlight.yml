name: YouTube → Highlight → Drive

on:
  workflow_dispatch:
    inputs:
      videoId:
        description: "YouTube video ID"
        required: true
      title:
        description: "Title"
        required: true
        default: "Test"
      channel:
        description: "Channel name"
        required: true
        default: "Test"
      channelId:
        description: "Channel ID (UC...)"
        required: true
        default: "UC0000000000000000000000"
      publishedAt:
        description: "ISO time"
        required: true
        default: "2024-01-01T00:00:00Z"

env:
  FONT_URL: https://github.com/googlefonts/noto-fonts/raw/main/hinted/ttf/NotoNaskhArabic/NotoNaskhArabic-Regular.ttf
  GDRIVE_REMOTE: ${{ secrets.GDRIVE_REMOTE }}
  GDRIVE_PATH:   ${{ secrets.GDRIVE_PATH }}
  MAKE_WEBHOOK:  ${{ secrets.MAKE_WEBHOOK }}

jobs:
  highlight:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install system deps (ffmpeg + fonts + rclone)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-noto-cjk rclone
          curl -L "$FONT_URL" -o ./NotoNaskhArabic-Regular.ttf

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python requirements
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Restore rclone config from secret
        env:
          RCLONE_CONFIG_CONTENTS: ${{ secrets.RCLONE_CONFIG_CONTENTS }}
        run: |
          mkdir -p ~/.config/rclone
          printf "%s\n" "$RCLONE_CONFIG_CONTENTS" > ~/.config/rclone/rclone.conf
          rclone listremotes || true

      - name: Resolve inputs
        id: meta
        run: |
          echo "videoId=${{ inputs.videoId }}" >> $GITHUB_OUTPUT
          echo "title=${{ inputs.title }}" >> $GITHUB_OUTPUT
          echo "channel=${{ inputs.channel }}" >> $GITHUB_OUTPUT
          echo "channelId=${{ inputs.channelId }}" >> $GITHUB_OUTPUT
          echo "publishedAt=${{ inputs.publishedAt }}" >> $GITHUB_OUTPUT

      - name: Download source video (yt-dlp)
        run: |
          set -e
          VIDEO_ID='${{ steps.meta.outputs.videoId }}'
          yt-dlp -o "input.%(ext)s" -f "bv*[ext=mp4]+ba[ext=m4a]/b[ext=mp4]/bv*+ba/b" "https://www.youtube.com/watch?v=${VIDEO_ID}"
          ls -lah

      - name: Transcribe + select highlight + burn subs
        run: |
          python scripts/process_video.py \
            --input input.mp4 \
            --min-seconds 30 \
            --max-seconds 60 \
            --lang ar \
            --keywords-prefer "قصة,مهم,نصيحة,أفضل,ضحك,سر,خطأ,نجاح,تجربة,لقطة" \
            --keywords-avoid "إعلان,موسيقى,مقدمة,خاتمة" \
            --font ./NotoNaskhArabic-Regular.ttf

      - name: Upload to Google Drive (rclone)
        run: |
          set -e
          VIDEO_ID='${{ steps.meta.outputs.videoId }}'
          # read artifact info from script
          START=$(python -c 'import json;print(json.load(open("artifact.json"))["start"])')
          END=$(python -c 'import json;print(json.load(open("artifact.json"))["end"])')
          OUTFILE=$(python -c 'import json;print(json.load(open("artifact.json"))["outfile"])')
          SAFE_CH=$(python - <<'PY'
from slugify import slugify
print(slugify("${{ steps.meta.outputs.channel }}", lowercase=False, regex_pattern=r"[^-\w\s]"))
PY
)
          DEST="${GDRIVE_REMOTE}:${GDRIVE_PATH%/}/${SAFE_CH}_${VIDEO_ID}_${START}-${END}.mp4"
          echo "Uploading $OUTFILE → $DEST"
          rclone copy "$OUTFILE" "$DEST" --progress
          echo "rclone upload OK"

      - name: (Optional) Callback to Make.com
        if: always()
        run: |
          python - <<'PY'
import json,requests,os
payload = {
  "videoId": "${{ steps.meta.outputs.videoId }}",
  "title": "${{ steps.meta.outputs.title }}",
  "channel": "${{ steps.meta.outputs.channel }}",
  "channelId": "${{ steps.meta.outputs.channelId }}",
  "publishedAt": "${{ steps.meta.outputs.publishedAt }}",
  "status": "success" if os.path.exists("artifact.json") else "failed"
}
if os.path.exists("artifact.json"):
  payload.update(json.load(open("artifact.json")))
if os.getenv("MAKE_WEBHOOK"):
  try:
    r = requests.post(os.getenv("MAKE_WEBHOOK"), json=payload, timeout=20)
    print("Callback status:", r.status_code)
  except Exception as e:
    print("Callback error:", e)
else:
  print("MAKE_WEBHOOK not set; skipping callback.")
PY
